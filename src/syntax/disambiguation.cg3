

# ========== #
# Delimiters #
# ========== #

DELIMITERS = "<.>" "<!>" "<?>" "<...>" "<¶>";

#PARENTHESES = "<$(>" "<$)>" "<$[>" "<$]>" "<${>" "<$}>" "<$«>" "<$»>" ;

# ============= #
# Tags and sets #
# ============= #

SETS

# I define end of clause and beginning of clause in a way so that the file
# may be read both by the CG-2 and the vislcg formalisms.

LIST BOS = (>>>) (<s>);
LIST EOS = (<<<) (</s>);

# POS tags from Apertium

LIST n = n N ;
LIST adj = adj A ;
LIST adv = adv Adv ;
LIST ani = ani Ani ;
LIST f = f Fem ;
LIST m = m Msc ;
LIST nt = nt Neu ;
LIST mf = mf ;
LIST sg = sg Sg ;
LIST pl = pl Pl ;
LIST nom = nom Nom ;
LIST gen = gen Gen ;
LIST dat = dat Dat ;
LIST acc = acc Acc ;
LIST ins = ins Ins ;
LIST loc = loc Loc ;
LIST voc = voc Voc ;
LIST prp = prp Prp ;
LIST indecl = indecl Indecl  ;
LIST prn = prn Prn ;
LIST det = det Det ;
LIST ind = ind Ind ;
LIST dem = dem Dem ;
LIST itg = itg Itg ;
LIST neg = neg Neg ;
LIST pos = pos Pos ;
LIST pprep = pprep Pprep ;
LIST ij = ij  ;
LIST p1 = p1 Sg1 Pl1 ;
LIST p2 = p2 Sg2 Pl2 ;
LIST p3 = p3 Sg3 Pl3 ;
LIST pr = pr Pr ;
LIST cnjcoo = cnjcoo CC ;
LIST cnjsub = cnjsub CS ;
LIST cnjadv = cnjadv  ;
LIST imperf = imperf Prt ;
LIST perf = perf PrsPrc ;
LIST num = num Num ;
LIST np = np  ;
LIST top = top Top ;
LIST ant = ant  ;
LIST cog = cog  ;
LIST sp = sp  ;
LIST hyd = hyd  ;
LIST vblex = vblex V ;
LIST vbmod = vbmod Mod ;
LIST fut = fut Fut ;
LIST imp = imp Imp ;
LIST inf = inf Inf ;
LIST past = past Prt ;
LIST pp = pp  ;
LIST pprs = pprs  ;
LIST pres = pres Prs ;
LIST act = act Adt ;
LIST psv = psv  ;
LIST ref = ref  ;
LIST qst = qst Qst ;
LIST sent = sent  ;
LIST vaux = vaux Aux ;

LIST p1p2 = p1 p2  ;
LIST finite = pres past fut  ;
# Синтаксис 

LIST @SUBJ = @SUBJ ;
LIST @OBJ = @OBJ ;
LIST @ADVL = @ADVL ;
LIST @P< = @P< ;
LIST @N< = @N< ;
LIST @VMAIN = @VMAIN ;

LIST @<SUBJ = @<SUBJ ;
LIST @<OBJ = @<OBJ ;
LIST @<ADVL = @<ADVL ;
LIST @SUBJ> = @SUBJ> ;
LIST @OBJ> = @OBJ> ;
LIST @ADVL> = @ADVL> ;

# Sets


SECTION

# gen or acc?
REMOVE gen IF (-1 vblex)(0 acc);
	## Я виду книгу студента.
	
REMOVE acc IF (0 gen)(-1 n);
	## Я виду студента.
	
	
REMOVE nom IF (-1 pr)(0 acc);

REMOVE nom IF (0 n + acc)(-1 vblex);

# Синтактические фунции

# MAP @VMAIN TARGET finite ;
# MAP @SUBJ TARGET n + nom OR prn + nom ;
# 
# MAP @OBJ TARGET n + acc IF (-1 vblex) ;
# MAP @P< TARGET n + acc IF (-1 pr) ;
# 
# MAP @ADVL TARGET pr ;
# MAP @ADVL TARGET adv ;



MAP @VMAIN TARGET finite ;
MAP @SUBJ> TARGET n + nom OR prn + nom IF (NOT *-1 finite)(*1 finite);
MAP @<SUBJ TARGET n + nom OR prn + nom IF (*-1 finite)(NOT *1 finite);

MAP @<OBJ TARGET n + acc IF (-1 vblex) ;
MAP @P< TARGET n + acc IF (-1 pr) ;

MAP @<ADVL TARGET pr OR adv IF (*-1 finite)(NOT *1 finite BARRIER (","));
MAP @ADVL> TARGET pr OR adv IF (NOT *-1 finite)(*1 finite);




